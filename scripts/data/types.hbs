
{{#each this.data}}
    // F{{i}}{{j}} function with {{i}} argument(s) and {{j}} return(s)
    type F{{i}}{{j}}{{#if this.G}}[{{this.G}}]{{/if}} func({{this.I}}) {{#if this.O}}({{this.O}}){{/if}}

    func (f F{{i}}{{j}}{{#if this.GT}}[{{this.GT}}]{{/if}}) Do({{this.I}}) {{#if this.O}}({{this.O}}){{/if}} {
    {{#if this.O}}return {{/if}} f({{this.IV}})
    }

    // D{{i}}{{j}} interface with a single method with {{i}} argument(s) and {{j}} return(s)
    type D{{i}}{{j}}{{#if this.G}}[{{this.G}}]{{/if}} interface {
        Do({{this.I}}) {{#if this.O}}({{this.O}}){{/if}}
    }

    {{#if this.TUPLE}}
        // T{{i}} tuple with {{i}} fields
        type T{{i}}[{{this.G}}] struct { {{this.TUPLE}} }
    {{/if}}
{{/each}}